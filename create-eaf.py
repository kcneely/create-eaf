## Create .EAF annotation files from list of .WAV clips##
##Version 2020-12-20##
##Kelsey C. Neely##

##This script takes a list of .WAV clips generated by the 'Process Session' script (process-session.py), and writes an .EAF file where each component clip is a segment with an annotation indicating the time stamp corresponding to the clip. This .EAF file can be used to as a basis for further annotation of the "master" .WAV file generated by the concatenation of the clips using the Process Session script. This script assumes that the file names of the clips will be in the format YYYY-MM-DD_HH-MM-SS.wav, and will only work if this is the case.

##Step 1: Make sure your files conform to the naming convention YYYY-MM-DD_HH-MM-SS and that you have both python and ffmpeg installed. If you used process-session.py to rename and convert your clips, then your files should be ready to generate an .eaf for them.
##Step 2: In command line, set current directory to path of folder where session files are located using the change directory command, e.g.: 
## cd C:\Users\kelsey\Desktop\KCN-20201112
##Step 3: Copy and paste this .py file into that folder, then run it from the command line, e.g.:
## py create-eaf.py
##Step 4: If the script has worked, an .eaf file titled "Success.eaf" will appear in the folder. Open the file in ELAN to check that it works. The first time you open the file, you will need to indicate the name of the master .WAV file generated by process-session.py
##Step 5: Rename the file Success.wav to match your project's filenaming conventions

import glob
import os
from datetime import datetime
import subprocess

#Set counters for time slot IDs and nnotation IDs in .eaf file
annotation_index = 1
time_index = 2
time_value = 0

#Open .eaf (XML) file and define sections
with open('Success.eaf', "w") as a:
    header = '<?xml version="1.0" encoding="UTF-8"?>' + '\n' + '<ANNOTATION_DOCUMENT AUTHOR="" DATE="" FORMAT="3.0" VERSION="3.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.mpi.nl/tools/elan/EAFv3.0.xsd">' + '\n' + '\t' + '<HEADER MEDIA_FILE="" TIME_UNITS="milliseconds">' + '\n' + '\t \t' + '<MEDIA_DESCRIPTOR MEDIA_URL="file:///[FilePathAndName]" MIME_TYPE="audio/x-wav" RELATIVE_MEDIA_URL="./Success.wav"/>' + '\n' + '\t \t' + '<PROPERTY NAME="URN">urn:nl-mpi-tools-elan-eaf:8b09aae8-a8b8-4e21-8c96-14316c8e908a</PROPERTY>' + '\n' + '\t \t' + '<PROPERTY NAME="lastUsedAnnotationId">1</PROPERTY>' + '\n' + '\t' + '</HEADER>' + '\n' + '\t' + '<TIME_ORDER>' + '\n' + '\t \t' + '<TIME_SLOT TIME_SLOT_ID="ts1" TIME_VALUE="0"/>'
    
    middle = '\t' + '</TIME_ORDER>' + '\n' + '\t' + '<TIER LINGUISTIC_TYPE_REF="Text" TIER_ID="Original_Time_Stamps">' + '\n'
    
    footer = '\t' + '</TIER>' + '\n' + '\t' + '<LINGUISTIC_TYPE GRAPHIC_REFERENCES="false" LINGUISTIC_TYPE_ID="Text" TIME_ALIGNABLE="true"/>' + '\n' + '</ANNOTATION_DOCUMENT>'
    
#Write XML header and the opening tags for the time order portion of the .eaf file    
    a.write(header)
    a.write('\n')
    
#Loop through files to get clip durations, convert times to ms, and write time slot IDs with time values    
    files = glob.glob('*.wav')
    for file in files:
        file_name = os.path.basename(file)
        try:
            date_object = datetime.strptime(file_name, "%Y-%m-%d_%H-%M-%S.wav")
            get_duration = 'ffprobe -v error -show_entries stream=duration -of default=noprint_wrappers=1:nokey=1 {}'.format(file)
            dur_output = subprocess.check_output(get_duration)
            duration = str(dur_output)
            duration = duration[2:-5]
            duration = float(duration)
            duration = int(duration * 1000)
            time_value = time_value + duration
            a.write('\t \t' + '<TIME_SLOT TIME_SLOT_ID="ts{}" TIME_VALUE="{}"/>'.format(time_index, time_value) + '\n')
            time_index = time_index + 1
        except:
            pass

#Write closing tags for time order portion and opening tags for annotation portion of .eaf file        
    a.write(middle)

#Reset time slot ID to 1 and loop through files to generate annotations in the format of HH:MM:SS    
    time_index = 1
    for file in files:
        file_name = os.path.basename(file)
        try:
            date_object = datetime.strptime(file_name, "%Y-%m-%d_%H-%M-%S.wav")
            annotation_value = datetime.strftime(date_object, "%H:%M:%S")
            a.write('\t \t' + '<ANNOTATION>' + '\n' + '\t \t \t' + '<ALIGNABLE_ANNOTATION ANNOTATION_ID="{}" TIME_SLOT_REF1="ts{}" TIME_SLOT_REF2="ts{}">'.format(annotation_index, time_index, time_index + 1) + '\n' + '\t \t \t \t'+ '<ANNOTATION_VALUE>{}</ANNOTATION_VALUE>'.format(annotation_value) + '\n' + '\t \t \t' + '</ALIGNABLE_ANNOTATION>' + '\n' + '\t \t' + '</ANNOTATION>' + '\n')
            annotation_index = annotation_index + 1
            time_index = time_index + 1
        except:
            pass

#Write closing tags of annotation portion and footer of .eaf file    
    a.write(footer)
    